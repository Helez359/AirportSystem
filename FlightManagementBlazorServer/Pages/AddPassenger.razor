@page "/AddPassenger/{flightId}"
@using System.Text
@inject NavigationManager _navigationManager;
@inject PassengerService _passengerService;

<h3>Add Passenger</h3>

@if(Passenger == null)
{
    <br/>
    <div class="spinner-border text-secondary" role="status">
        <span class="visually-hidden"></span>
    </div>
}
else
{
    <EditForm Model="@Passenger" OnValidSubmit="@AddPassengerAsync">
        <PassengerFields Passenger="@Passenger"></PassengerFields>
        <button type="submit" class="btn btn-primary">
            <span class="oi-pencil"></span>
            Add Passenger
        </button>

        <button type="button" class="btn btn-secondary" @onclick="Close">
            <span class="oi oi-arrow-circle-left"></span>
            Close
        </button>
    </EditForm>
    <NotificationDialog @ref="NotificationDialog" Description="@ConcatenatedValidationErrors"></NotificationDialog>
}


@code {
    [Parameter]
    public string flightId { get; set; }
    
    public Passenger Passenger { get; set; }
    public NotificationDialog NotificationDialog { get; set; }
    public List<ValidationError> ValidationErrors { get; set; }
    public string ConcatenatedValidationErrors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Passenger = new Passenger();
    }
    private void Close()
    {
        _navigationManager.NavigateTo("/");
    }
    public async Task AddPassengerAsync()
    {
        ValidationErrors = ValidatePassenger();
        if (ValidationErrors.Any())
        {
            ConcatenatedValidationErrors = GetConcatenatedValidationErrors(ValidationErrors);
            NotificationDialog.Show();
        }
        else
        {
            Passenger.FlightId = int.Parse(flightId);
            await _passengerService.AddPassengerAsync(Passenger, int.Parse(flightId));
            Close();
        }
    }
    protected List<ValidationError> ValidatePassenger()
    {
        var validationErrors = new List<ValidationError>();
        if (String.IsNullOrWhiteSpace(Passenger.Name))
        validationErrors.Add(new ValidationError { Description = "Please Insert Passenger Name!" });
        if (String.IsNullOrWhiteSpace(Passenger.LastName))
        validationErrors.Add(new ValidationError { Description = "Please Insert Passenger Last Name!" });
        if (String.IsNullOrWhiteSpace(Passenger.Gender))
        validationErrors.Add(new ValidationError { Description = "Please Insert Passenger Gender!" });
        return validationErrors;
    }
    protected string GetConcatenatedValidationErrors(List<ValidationError> validationErrors)
    {
        StringBuilder message = new StringBuilder();
        foreach (var error in validationErrors)
        {
            if (message.Length == 0)
            {
                message.Append(error.Description);
            }
            else
            {
                message.Append($"{Environment.NewLine}{error.Description}");
            }
        }

        return message.ToString();
    }
}
